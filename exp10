Code:

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node
struct Node {
    int key;
    struct Node* left;
    struct Node* right;
    int height; // Height of the node
};

// Function prototypes
int max(int a, int b);
int height(struct Node* N);
struct Node* createNode(int key);
struct Node* rightRotate(struct Node* y);
struct Node* leftRotate(struct Node* x);
int getBalance(struct Node* N);
struct Node* insert(struct Node* node, int key);
struct Node* minValueNode(struct Node* node);
struct Node* deleteNode(struct Node* root, int key);
void preOrder(struct Node* root);

// Main function
int main() {
    struct Node* root = NULL;

    // Inserting nodes into the AVL tree
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);
    root = insert(root, 25);

    printf("Preorder traversal of the constructed AVL tree is:\n");
    preOrder(root);

    // Deleting a node
    printf("\nDeleting 40...\n");
    root = deleteNode(root, 40);

    printf("Preorder traversal after deletion of 40:\n");
    preOrder(root);

    return 0;
}

// Function to get maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to get the height of the tree
int height(struct Node* N) {
    if (N == NULL)
        return 0;
    return N->height;
}

// Function to create a new node
struct Node* createNode(int key) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1; // New node is initially added at leaf
    return node;
}

// Right rotate subtree rooted with y
struct Node* rightRotate(struct Node* y) {
    struct Node* x = y->left;
    struct Node* T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    // Return new root
    return x;
}

// Left rotate subtree rooted with x
struct Node* leftRotate(struct Node* x) {
    struct Node* y = x->right;
    struct Node* T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    // Return new root
    return y;
}

// Get balance factor of node N
int getBalance(struct Node* N) {
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}

// Function to insert a node in AVL tree
struct Node* insert(struct Node* node, int key) {
    // Perform normal BST insertion
    if (node == NULL)
        return createNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else // Duplicate keys are not allowed in AVL tree
        return node;

    // Update height of this ancestor node
    node->height = 1 + max(height(node->left), height(node->right));

   // Get the balance factor of this ancestor node to check whether it became unbalanced
   int balance = getBalance(node);

   // If this node becomes unbalanced, then there are 4 cases

   // Left Left Case
   if (balance > 1 && key < node->left->key)
       return rightRotate(node);

   // Right Right Case
   if (balance < -1 && key > node->right->key)
       return leftRotate(node);

   // Left Right Case
   if (balance > 1 && key > node->left->key) {
       node->left = leftRotate(node->left);
       return rightRotate(node);
   }

   // Right Left Case
   if (balance < -1 && key < node->right->key) {
       node->right = rightRotate(node->right);
       return leftRotate(node);
   }

   // Return the (unchanged) node pointer
   return node;
}

// Function to find the minimum value node in the tree
struct Node* minValueNode(struct Node* node) {
   struct Node* current = node;

   while (current && current->left != NULL)
       current = current->left;

   return current;
}

// Function to delete a node from AVL tree
struct Node* deleteNode(struct Node* root, int key) {
   // STEP 1: PERFORM STANDARD BST DELETE
   if (root == NULL)
       return root;

   if (key < root->key)
       root->left = deleteNode(root->left, key);
   else if (key > root->key)
       root->right = deleteNode(root->right, key);
   else {
       // This is the node to be deleted

       if ((root->left == NULL) || (root->right == NULL)) {
           struct Node *temp = root->left ? root->left : root->right;

           // No child case
           if (temp == NULL) {
               temp = root;
               root = NULL; // This will make the caller also delete the reference to this node.
           } else // One child case
               *root = *temp; // Copy the contents of the non-empty child

           free(temp);
       } else {
           // Two children case: Get the inorder successor (smallest in the right subtree)
           struct Node* temp = minValueNode(root->right);

           // Copy the inorder successor's data to this node and delete the successor.
           root->key = temp->key;
           root->right = deleteNode(root->right, temp->key);
       }
   }

   // If the tree had only one node then return 
   if (root == NULL)
       return root;

   // STEP 2: UPDATE HEIGHT OF THIS ANCESTOR NODE 
   root->height = 1 + max(height(root->left), height(root->right));

   // STEP 3: GET THE BALANCE FACTOR OF THIS ANCESTOR NODE TO CHECK WHETHER THIS NODE BECAME UNBALANCED 
   int balance = getBalance(root);

   // If this node becomes unbalanced, then there are 4 cases

   // Left Left Case
   if (balance > 1 && getBalance(root->left) >= 0)
       return rightRotate(root);

   // Left Right Case
   if (balance > 1 && getBalance(root->left) < 0) {
       root->left = leftRotate(root->left);
       return rightRotate(root);
   }

   // Right Right Case
   if (balance < -1 && getBalance(root->right) <= 0)
       return leftRotate(root);

   // Right Left Case
   if (balance < -1 && getBalance(root->right) > 0) {
       root->right = rightRotate(root->right);
       return leftRotate(root);
   }

   return root;
}

// Preorder traversal of AVL tree 
void preOrder(struct Node* root) {
   if (root != NULL) {
       printf("%d ", root->key);
       preOrder(root->left);
       preOrder(root->right);
   }
}
